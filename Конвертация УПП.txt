<<<<<<< HEAD
// Конвертация УПП 1.3.40.1 от 17.08.2016 8:32:15
=======
// Конвертация УПП 1.3.40.1 от 03.08.2016 13:04:57
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
	Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
	    ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
	КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ГТДИмпорт_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации_отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
<<<<<<< HEAD
		ДобавитьПОД_Документ_ОтчетКомиссионераОПродажах(ПравилаОбработкиДанных);
=======
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручениеВходящее_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТребованиеНакладная_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыИРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ГТДИмпорт_Отправка
Процедура ДобавитьПОД_Документ_ГТДИмпорт_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ГТДИмпорт_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ГТДИмпорт_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ГТДИмпорт_ПТиУ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ДанныеИБ.УсловныйФакт И 
			ДанныеИБ.ВыгружатьКакГТД И 
			ДанныеИБ.ВыгрузитьВБУ тогда
	
		ИспользованиеПКО.Документ_ГТДИмпорт_Отправка = Истина;
		ИспользованиеПКО.Документ_ГТДИмпорт_ПТиУ_Отправка = ЛОЖЬ;
		
	ИначеЕсли НЕ ДанныеИБ.УсловныйФакт И 
			  НЕ ДанныеИБ.ВыгружатьКакГТД И 
			  ДанныеИБ.ВыгрузитьВБУ Тогда
	
		ИспользованиеПКО.Документ_ГТДИмпорт_Отправка = ЛОЖЬ;
		ИспользованиеПКО.Документ_ГТДИмпорт_ПТиУ_Отправка = Истина;
		
	Иначе
	
		ИспользованиеПКО.Документ_ГТДИмпорт_Отправка = ЛОЖЬ;
		ИспользованиеПКО.Документ_ГТДИмпорт_ПТиУ_Отправка = ЛОЖЬ;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ВыгрузитьВБУ = ЛОЖЬ Тогда 
	
		ИспользованиеПКО.Документ_КорректировкаПоступления_Отправка = ЛОЖЬ;
		
	Иначе 
	
		ИспользованиеПКО.Документ_КорректировкаПоступления_Отправка = ИСТИНА;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_отправка
Процедура ДобавитьПОД_Документ_КорректировкаРеализации_отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаРеализации_отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_КорректировкаРеализации_отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаРеализации_отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ВыгрузитьВБУ = ЛОЖЬ Тогда 
	
		ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка = ЛОЖЬ;
		
	Иначе 
	
		ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка = ИСТИНА;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
<<<<<<< HEAD
#Область Документ_ОтчетКомиссионераОПродажах
Процедура ДобавитьПОД_Документ_ОтчетКомиссионераОПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомиссионераОПродажах";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОПродажах_Отправка");
КонецПроцедуры
#КонецОбласти
=======
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеВходящее_Отправка
Процедура ДобавитьПОД_Документ_ПлатежноеПоручениеВходящее_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручениеВходящее_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПлатежноеПоручениеВходящее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ППВ_ПрочееПоступление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПлатежноеПоручениеВходящее_Отправка = Ложь;
	ИспользованиеПКО.Документ_ППВ_ПрочееПоступление_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам,
		// расчетам по кредитам (займам) и прочим расчетам с контрагентами
		ИспользованиеПКО.Документ_ПлатежноеПоручениеВходящее_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам 
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам Тогда
		ИспользованиеПКО.Документ_ППВ_ПрочееПоступление_Отправка = Истина;
		
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
	//	Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		// Конвертация валюты - из операций, связанных с конвертацией валюты
	//	ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Истина;
		
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаймаРаботником Тогда
		
		// Расчеты с сотрудниками - из возврата займа работником
	//	ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
	
	//	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
	//		ИспользованиеПКО.Документ_ППВ_ПрочееПоступление_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			
		//	Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
				
				// 91.01
		//		ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Истина;
				
		//	ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_ Тогда
				
				// 71.xx
				// Расчеты с сотрудниками - из прочего поступления (расчеты с подотчеными лицами)
		//		ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
				
			Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
				Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами Тогда
				
				// 60.xx, 62.xx, 66.xx, 67.xx 76.xx
				// Расчеты с контрагентами - из прочего поступления
				ИспользованиеПКО.Документ_ПлатежноеПоручениеВходящее_Отправка = Истина;
				
			Иначе 
				ИспользованиеПКО.Документ_ППВ_ПрочееПоступление_Отправка = Истина;
			КонецЕсли;
				
		КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручениеВходящее КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПлатежноеПоручениеИсходящее_Отправка
Процедура ДобавитьПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручениеИсходящее_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ППИ_РасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ППИ_ПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ППИ_ПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ППИ_РасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ППИ_ПрочееСписание_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ППИ_РасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ППИ_ПереводНаДругойСчет_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ППИ_ПлатежиВБюджет_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ППИ_РасчетыССотрудниками_Отправка  = Ложь;
	ИспользованиеПКО.Документ_ППИ_ПрочееСписание_Отправка        = Ложь;
	
	//ИспользованиеПКО.Документ_ППИ_ПрочиеРасходы_Отправка         = Ложь;
	//ИспользованиеПКО.Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка        = Ложь;
	//ИспользованиеПКО.Документ_ППИ_ПеречислениеЗПНаЛС_Отправка    = Ложь;
	
	//ВидПрочегоСписания = "";
	//ВидРасчетовСКонтрагентом = "";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику ИЛИ 
		 ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ИспользованиеПКО.Документ_ППИ_РасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда          
		ИспользованиеПКО.Документ_ППИ_ПереводНаДругойСчет_Отправка = истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ИспользованиеПКО.Документ_ППИ_ПлатежиВБюджет_Отправка = Истина;	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		ИспользованиеПКО.Документ_ППИ_РасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		ИспользованиеПКО.Документ_ППИ_ПрочееСписание_Отправка = Истина;
	КонецЕсли;
	
	//	
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам Тогда
	//	//Прочее
	//	ИспользованиеПКО.Документ_ППИ_ПрочееСписание_Отправка = Истина;
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
	//	Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ") Тогда
	//		ИспользованиеПКО.Документ_ППИ_ПлатежиВБюджет_Отправка = Истина;
	//	Иначе
	//		СчетУчетаРасчетовСКонтрагентом = Неопределено;
	//		Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
	//			СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
	//		КонецЕсли;
	//		Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
	//			Или СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
	//			//ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
	//		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
	//			И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
	//			ИспользованиеПКО.Документ_ППИ_ПрочееСписание_Отправка = Истина;
	//		ИначеЕсли  ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыС четов.Хозрасчетный.ПустаяСсылка() 
	//			И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
	//			ИспользованиеПКО.Документ_ППИ_ПлатежиВБюджет_Отправка = Истина;
	//		Иначе
	//			ИспользованиеПКО.Документ_ППИ_РасчетыСКонтрагентами_Отправка = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	
	//	
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
	//	ИспользованиеПКО.Документ_ППИ_ПереводНаДругойСчет_Отправка = Истина;
	//	
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
	//	Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
	//		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
	//		ИспользованиеПКО.Документ_ППИ_ПрочиеРасходы_Отправка = Истина;
	//	Иначе
	//		ИспользованиеПКО.Документ_ППИ_ПрочееСписание_Отправка = Истина;
	//	КонецЕсли;
	//	
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
	//	ИспользованиеПКО.Документ_ППИ_РасчетыСКонтрагентами_Отправка = Истина;
	//	
	//ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП  Тогда
	//	ИспользованиеПКО.Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка = Истина;
	//КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПТИУ_Перевыставление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.Перевыставление = ЛОЖЬ 
			И ДанныеИБ.УсловныйФакт = ЛОЖЬ 
			И ДанныеИБ.ВыгрузитьВБУ = ИСТИНА
			И ДанныеИБ.ВыгружатьКакВозврат = ЛОЖЬ
	Тогда 
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = ИСТИНА;
		ИспользованиеПКО.Документ_ПТИУ_Перевыставление_Отправка = ЛОЖЬ;
	
	ИначеЕсли
			ДанныеИБ.Перевыставление = ИСТИНА 
			И ДанныеИБ.УсловныйФакт = ЛОЖЬ 
			И ДанныеИБ.ВыгрузитьВБУ = ИСТИНА
			И ДанныеИБ.ВыгружатьКакВозврат = ЛОЖЬ
	Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = ЛОЖЬ;
		ИспользованиеПКО.Документ_ПТИУ_Перевыставление_Отправка = ИСТИНА;
		
	Иначе 
	
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = ЛОЖЬ;
		ИспользованиеПКО.Документ_ПТИУ_Перевыставление_Отправка = ЛОЖЬ;
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = ЛОЖЬ;
	
	Если ДанныеИБ.ВыгружатьКакВозврат = ЛОЖЬ 
			И ДанныеИБ.ВыгрузитьВБУ = ИСТИНА
			И ДанныеИБ.УсловныйФакт = ЛОЖЬ
			И ДанныеИБ.Проведен = ИСТИНА
			И ДанныеИБ.ПометкаУдаления = ЛОЖЬ
	Тогда 
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = ИСТИНА;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
	//ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка = Ложь;
	
	Для Каждого СтрокаОснование ИЗ ДанныеИБ.ДокументыОснования Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Истина;
		ТипОснования = ТипЗнч(СтрокаОснование.ДокументОснование);
	КонецЦикла;
	
	//Если ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка 
	//	И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
	//
	//	УзелСписокОрганизаций = КомпонентыОбмена.ПараметрыКонвертации.Организации;
	//	
	//	ИспользованиеПКО.Документ_СчетФактураПолученныйИК_Отправка = УзелСписокОрганизаций.НайтиПоЗначению(ОрганизацияПолучатель) <> Неопределено;
	//КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТребованиеНакладная_Отправка
Процедура ДобавитьПОД_Документ_ТребованиеНакладная_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ТребованиеНакладная_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ТребованиеНакладная;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТребованиеНакладная_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Отправка = ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации");
		//ИспользованиеПКО.Справочник_БанковскиеСчета_Отправка = ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторЕдиницИзмерения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_КонтрагентыГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Группа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_Номенклатура_Группа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияОрганизаций_Отправка
Процедура ДобавитьПОД_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПодразделенияОрганизаций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ПодразделенияОрганизаций_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПодразделенияОрганизаций_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ПодразделенияОрганизаций_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Владелец);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходы_Отправка
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыИРасходы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПрочиеДоходыИРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрочиеДоходыИРасходы_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Группа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_Склады_Группа_Отправка = (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДвиженияДенежныхСредств_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДвиженияДенежныхСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДвиженияДенежныхСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВГ_СтатьиДвиженияДенежныхСредствБУ;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизЛица_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ГТДИмпорт_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ГТДИмпорт_ПТиУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
<<<<<<< HEAD
		ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Отправка(ПравилаКонвертации);
=======
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПлатежноеПоручениеВходящее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППВ_ПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_ПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_ПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_ПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_ПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_ПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_РасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ППИ_РасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПТИУ_Перевыставление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТребованиеНакладная_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Банки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Группа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПрочиеДоходыИРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Группа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДДС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиЗатрат_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтраныМира_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизЛица_Отправка(ПравилаКонвертации);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийВозвратТоваровОтПокуп";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	НоваяСтрока.СвойствоФормата = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОрдер";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("AdditionalInfo", Строка(ДанныеИБ.ВыгружатьКакВозврат));
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Организация);
	
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоАвансам", Строка(ДанныеИБ.СчетУчетаРасчетовПоАвансам));
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Строка(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом));
	
	//Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВозвратТоваровОтПокупателяТовары.Количество КАК ЧИСЛО(10, 2)) КАК Количество,
	|	Выразить(ВозвратТоваровОтПокупателяТовары.Цена Как Число(10,2)) Как Цена,
	|	Выразить(ВозвратТоваровОтПокупателяТовары.Сумма КАК Число(10,2)) КАК Сумма,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	Выразить(ВозвратТоваровОтПокупателяТовары.СуммаНДС как Число(10,2)) КАК СуммаНДС,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратТоваровОтПокупателяТовары.Себестоимость КАК Себестоимость,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПартии КАК ДокументПоступления,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателяТовары.СчетУчетаБУ) КАК СчетУчета,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателяТовары.СчетРасходовБУ) КАК СчетДоходов,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровОтПокупателяТовары.СчетДоходовБУ) КАК СчетРасходов
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийВозвратТоваровПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Организация);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Склад.КПП) Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", Строка(ДанныеИБ.Склад.КПП));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ВидОперации);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоАвансам", Строка(ДанныеИБ.СчетУчетаРасчетовПоАвансам));
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Строка(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом));
	
	РасширенныеДанныеИБ = ВозвратТовараПоставщику(ДанныеИБ);
	
	// Товары
	Если РасширенныеДанныеИБ.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", РасширенныеДанныеИБ.Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ГТДИмпорт_Отправка
Процедура ДобавитьПКО_Документ_ГТДИмпорт_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ГТДИмпорт_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДекларации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НДСВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПошлинаВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД.Код);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Организация);
	
	//ВыгрузитьПодразделение(ДанныеИБ, ДанныеXDTO);
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Данные шапки документа необходимы для вычисления курса и кратности
	// взаиморасчетов 
		ШапкаДокумента = "
						 |ВЫБРАТЬ
		                 |	ДанныеШапкиДокумента.ВалютаДокумента
		                 |ПОМЕСТИТЬ ДанныеШапкиДокумента
		                 |ИЗ
		                 |	Документ.ГТДИмпорт КАК ДанныеШапкиДокумента
		                 |ГДЕ
		                 |	ДанныеШапкиДокумента.Ссылка = &Ссылка
		                 |;
		                 |
		                 |////////////////////////////////////////////////////////////////////////////////
		                 |ВЫБРАТЬ
		                 |	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		                 |	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		                 |ИЗ
		                 |	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		                 |				&Дата,
		                 |				Валюта В
		                 |					(ВЫБРАТЬ
		                 |						Док.ВалютаДокумента
		                 |					ИЗ
		                 |						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		                 |		ПО ДанныеШапкиДокумента.ВалютаДокумента = КурсВалютыДокумента.Валюта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", Выборка.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", Выборка.КратностьВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсДокумента", Выборка.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьДокумента", Выборка.КратностьВзаиморасчетов);
	
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Строка(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом));
	
	// Дополнительные свойства для договора
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		СтруктураДанныеДоговора = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", "Прочее");
		ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	Иначе
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.ДоговорКонтрагента);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеТовары.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеТовары.НомерРаздела КАК ЧИСЛО(10, 0)) КАК НомерРаздела,
	|	ВЫРАЗИТЬ(ДанныеТовары.Количество КАК ЧИСЛО(10, 2)) КАК Количество,
	|	ВЫРАЗИТЬ(ДанныеТовары.ТаможенныйСбор КАК ЧИСЛО(15, 2)) КАК ТаможеннаяСтоимость,
	|	ДанныеТовары.ДокументПартии КАК ДокументПоступления,
	|	ДанныеТовары.СуммаНДС КАК СуммаНДС,
	|	ДанныеТовары.СуммаПошлины КАК СуммаПошлины,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеТовары.СчетУчетаБУ) КАК СчетУчета,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеТовары.СчетУчетаНДС) КАК СчетУчетаНДС
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ДанныеТовары
	|ГДЕ
	|	ДанныеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеРазделы.ТаможеннаяСтоимость КАК ЧИСЛО(15, 2)) КАК ТаможеннаяСтоимость,
	|	ДанныеРазделы.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРазделы.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ДанныеРазделы.СтавкаПошлины КАК ЧИСЛО(10, 2)) КАК СтавкаПошлины,
	|	ДанныеРазделы.СуммаПошлины КАК СуммаПошлины,
	|	ВЫРАЗИТЬ(ДанныеРазделы.НомерСтроки КАК ЧИСЛО(10, 0)) КАК НомерРаздела,
	|	ДанныеРазделы.НДСВВалюте,
	|	ДанныеРазделы.ПошлинаВВалюте
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ДанныеРазделы
	|ГДЕ
	|	ДанныеРазделы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	Выборка = Запрос.ВыполнитьПакет();
	ДанныеXDTO.Вставить("Товары", Выборка[0].Выгрузить());
	ДанныеXDTO.Вставить("Разделы", Выборка[1].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ГТДИмпорт_ПТиУ_Отправка
Процедура ДобавитьПКО_Документ_ГТДИмпорт_ПТиУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ГТДИмпорт_ПТиУ_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ГТДИмпорт_ПТиУ_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ГТДИмпорт_ПТиУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Организация);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	ДанныеXDTO.Вставить("AdditionalInfo", "ПТИУ");
	
	// Данные шапки документа необходимы для вычисления курса и кратности
	// взаиморасчетов 
		ШапкаДокумента = "
						 |ВЫБРАТЬ
		                 |	ДанныеШапкиДокумента.ВалютаДокумента
		                 |ПОМЕСТИТЬ ДанныеШапкиДокумента
		                 |ИЗ
		                 |	Документ.ГТДИмпорт КАК ДанныеШапкиДокумента
		                 |ГДЕ
		                 |	ДанныеШапкиДокумента.Ссылка = &Ссылка
		                 |;
		                 |
		                 |////////////////////////////////////////////////////////////////////////////////
		                 |ВЫБРАТЬ
		                 |	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) КАК КурсВзаиморасчетов,
		                 |	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1) КАК КратностьВзаиморасчетов
		                 |ИЗ
		                 |	ДанныеШапкиДокумента КАК ДанныеШапкиДокумента
		                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		                 |				&Дата,
		                 |				Валюта В
		                 |					(ВЫБРАТЬ
		                 |						Док.ВалютаДокумента
		                 |					ИЗ
		                 |						ДанныеШапкиДокумента КАК Док)) КАК КурсВалютыДокумента
		                 |		ПО ДанныеШапкиДокумента.ВалютаДокумента = КурсВалютыДокумента.Валюта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШапкаДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", Выборка.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", Выборка.КратностьВзаиморасчетов);
	ДанныеXDTO.Вставить("КурсДокумента", Выборка.КурсВзаиморасчетов);
	ДанныеXDTO.Вставить("КратностьДокумента", Выборка.КратностьВзаиморасчетов);
	
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Строка(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом));
	
	// Дополнительные свойства для договора
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		СтруктураДанныеДоговора = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
		СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		СтруктураДанныеДоговора.Вставить("ВидДоговора", "Прочее");
		ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	Иначе
		ДанныеXDTO.Вставить("Договор", ДанныеИБ.ДоговорКонтрагента);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТДИмпортТовары.Ссылка,
	|	ВГ_ВариантыСтатейЗатрат.СтатьяЗатратБУ.Наименование КАК Содержание,
	|	ГТДИмпортТовары.ВариантСтатейЗатрат,
	|	ВГ_ВариантыСтатейЗатрат.СтатьяЗатратБУ КАК СтатьяЗатрат,
	|	ВГ_ВариантыСтатейЗатрат.СчетЗатратБУ КАК СчетЗатрат,
	|	ГТДИмпортТовары.ПодразделениеОрганизации КАК ПодразделениеЗатрат,
	|	1 КАК Количество,
	|	СУММА(ГТДИмпортТовары.СуммаПошлины + ГТДИмпортТовары.ТаможенныйСбор) КАК Сумма,
	|	СУММА(ГТДИмпортТовары.СуммаПошлины + ГТДИмпортТовары.ТаможенныйСбор) КАК Цена,
	|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВГ_ВариантыСтатейЗатрат КАК ВГ_ВариантыСтатейЗатрат
	|		ПО ГТДИмпортТовары.ВариантСтатейЗатрат = ВГ_ВариантыСтатейЗатрат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ПО ГТДИмпортТовары.Ссылка = ГТДИмпортРазделы.Ссылка
	|ГДЕ
	|	ГТДИмпортТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ГТДИмпортТовары.Ссылка,
	|	ВГ_ВариантыСтатейЗатрат.СтатьяЗатратБУ,
	|	ВГ_ВариантыСтатейЗатрат.СчетЗатратБУ,
	|	ГТДИмпортТовары.ПодразделениеОрганизации,
	|	ГТДИмпортТовары.ВариантСтатейЗатрат,
	|	ВГ_ВариантыСтатейЗатрат.СтатьяЗатратБУ.Наименование,
	|	ГТДИмпортРазделы.СтавкаНДС";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	Выборка = Запрос.ВыполнитьПакет();
	ДанныеXDTO.Вставить("Услуги", Выборка[0].Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВосстановитьНДС";
	НоваяСтрока.СвойствоФормата = "ВосстановитьНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийИсправленияПоступленияРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПоступления";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйДокументПоступления";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	
	ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ВидОперации);
	
	ДокументПоступления = ДанныеИБ.ДокументПоступления;
	ИнструкцияДокументПоступления = Новый Структура("Значение,ИмяПКО");
	ИнструкцияДокументПоступления.Значение = ДокументПоступления;
		Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ИнструкцияДокументПоступления.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
		ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ИнструкцияДокументПоступления.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
		КонецЕсли;
	
	ИсправляемыйДокументПоступления = ДанныеИБ.ИсправляемыйДокументПоступления;
	ИнструкцияИсправляемыйДокументПоступления = Новый Структура("Значение,ИмяПКО");
	ИнструкцияИсправляемыйДокументПоступления.Значение = ИсправляемыйДокументПоступления;
		Если ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ИнструкцияИсправляемыйДокументПоступления.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
		ИначеЕсли ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ИнструкцияИсправляемыйДокументПоступления.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
		КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументПоступления", ИнструкцияДокументПоступления);
	ДанныеXDTO.Вставить("ИсправляемыйДокументПоступления", ИнструкцияИсправляемыйДокументПоступления);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДокументПоступления);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ИсправляемыйДокументПоступления);
	
	РасширенныеДанныеИБ = ЗаполнитьДанныеКорректировкиПоступленияТоваров(ДанныеИБ);
	
	// Товары
	Если РасширенныеДанныеИБ.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", РасширенныеДанныеИБ.Товары);
	КонецЕсли;
	
	// Услуги
	Если РасширенныеДанныеИБ.Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", РасширенныеДанныеИБ.Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийИсправленияПоступленияРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
<<<<<<< HEAD
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
=======
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументРеализации";
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйДокументРеализации";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПрочиеДоходыИРасходы_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
<<<<<<< HEAD
=======

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	//ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//Если СтекВыгрузки.Количество() > 1 Тогда
	//	Возврат;
	//КонецЕсли;
	
	ДанныеXDTO.Вставить("СтатьяДоходов", ДанныеИБ.ВариантЗатрат.АналитикаЗатрат);
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
<<<<<<< HEAD
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
=======
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетСписанияНДС";
	НоваяСтрока.СвойствоФормата = "СчетСписанияНДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеВходящее_Отправка
Процедура ДобавитьПКО_Документ_ПлатежноеПоручениеВходящее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПлатежноеПоручениеВходящее_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	
	Грузоотправитель = ДанныеИБ.Грузоотправитель;
	ИнструкцияГрузоотправитель = Новый Структура("Значение, ИмяПКО");
	ИнструкцияГрузоотправитель.Значение = Грузоотправитель;
	ИнструкцияГрузоотправитель.ИмяПКО = "Справочник_Контрагенты_Отправка";
	
	Грузополучатель = ДанныеИБ.Грузополучатель;
	ИнструкцияГрузополучатель = Новый Структура("Значение, ИмяПКО");
	ИнструкцияГрузополучатель.Значение = Грузополучатель;
	ИнструкцияГрузополучатель.ИмяПКО = "Справочник_Контрагенты_Отправка";
	
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Грузоотправитель);
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Грузополучатель);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	
	ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ВидОперации);
	
	ДокументРеализации = ДанныеИБ.ДокументРеализации;
	ИнструкцияДокументРеализации = Новый Структура("Значение,ИмяПКО");
	ИнструкцияДокументРеализации.Значение = ДокументРеализации;
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ИнструкцияДокументРеализации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ИнструкцияДокументРеализации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ИнструкцияДокументРеализации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ИнструкцияДокументРеализации.ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ИнструкцияДокументРеализации.ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
		КонецЕсли;
	
	ИсправляемыйДокументРеализации = ДанныеИБ.ИсправляемыйДокументРеализации;
	ИнструкцияИсправляемыйДокументРеализации = Новый Структура("Значение,ИмяПКО");
	ИнструкцияИсправляемыйДокументРеализации.Значение = ИсправляемыйДокументРеализации;
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ИнструкцияИсправляемыйДокументРеализации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		ИначеЕсли ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ИнструкцияИсправляемыйДокументРеализации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ИнструкцияИсправляемыйДокументРеализации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ИнструкцияИсправляемыйДокументРеализации.ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Отправка";
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ИнструкцияИсправляемыйДокументРеализации.ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
		КонецЕсли;
	
	ДанныеXDTO.Вставить("ДокументРеализации", ИнструкцияДокументРеализации);
	ДанныеXDTO.Вставить("ИсправляемыйДокументРеализации", ИнструкцияИсправляемыйДокументРеализации);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Строка(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом));
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДокументРеализации);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ИсправляемыйДокументРеализации);
	
	РасширенныеДанныеИБ = ЗаполнитьДанныеКорректировкиРеализацииТоваров(ДанныеИБ);
	
	// Товары
	Если РасширенныеДанныеИБ.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", РасширенныеДанныеИБ.Товары);
	КонецЕсли;
	
	// Услуги
	Если РасширенныеДанныеИБ.Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", РасширенныеДанныеИБ.Услуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПрочиеДоходыИРасходы_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	//ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//Если СтекВыгрузки.Количество() > 1 Тогда
	//	Возврат;
	//КонецЕсли;
	
	ДанныеXDTO.Вставить("СтатьяДоходов", ДанныеИБ.ВариантЗатрат.АналитикаЗатрат);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОприходованиеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОприходованиеТоваровТовары.Номенклатура,
	|	ОприходованиеТоваровТовары.ЕдиницаИзмерения,
	|	ОприходованиеТоваровТовары.Количество,
	|	ОприходованиеТоваровТовары.Цена,
	|	ОприходованиеТоваровТовары.Сумма,
	|	ОприходованиеТоваровТовары.СчетУчетаБУ.Код КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ОприходованиеТоваровТовары.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
	|				ИЛИ ОприходованиеТоваровТовары.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Продукция)
	|				ИЛИ ОприходованиеТоваровТовары.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Оборудование)
	|			ТОГДА ""СобственныеТовары""
	|		ИНАЧЕ ""КомиссионныеТовары""
	|	КОНЕЦ КАК ТипЗапасов
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|ГДЕ
	|	ОприходованиеТоваровТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионераОПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионераОПродажах_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСВключенВСтоимость";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СпособыРасчетаКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВознаграждения";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяЗатрат";
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьКомиссионноеВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаЗатрат";
	НоваяСтрока.СвойствоФормата = "СчетУчетаЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовЗаПосредническиеУслуги";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовЗаПосредническиеУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовПоАвансамВыданным";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Покупатели", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Покупатели;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВыставленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионераОПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах",ДанныеИБ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
	ДанныеXDTO.Вставить("СчетУчетаЗатрат", ДанныеИБ.ВариантЗатрат.СчетЗатратБУ);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоАвансам", ДанныеИБ.СчетУчетаРасчетовПоАвансамВыданным.Код);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги", ДанныеИБ.СчетУчетаРасчетовЗаПосредническиеУслуги.Код);
	
	// Увеличиваем суммы документа на модуль отрицательных сумм
	ЗапросОтрицательныеСуммы = Новый Запрос;
	ЗапросОтрицательныеСуммы.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.Сумма < 0
	|			ТОГДА -1 * ОтчетКомиссионераОПродажахТовары.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения < 0
	|			ТОГДА -1 * ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВознаграждения
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|	И (ОтчетКомиссионераОПродажахТовары.Сумма < 0
	|			ИЛИ ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения < 0)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаВознаграждения)
	|ПО
	|	ОБЩИЕ";
	
	ЗапросОтрицательныеСуммы.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = ЗапросОтрицательныеСуммы.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		ДанныеXDTO.Вставить("Сумма", ДанныеИБ.СуммаДокумента + Выборка.СуммаПродажи);
		ДанныеXDTO.Вставить("СуммаВознаграждения", ДанныеИБ.СуммаВознаграждения + Выборка.СуммаВознаграждения);
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Ссылка,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(Товары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(Товары.Количество * Товары.Номенклатура.КолВоМквВКор / Товары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА Товары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(Товары.Количество / Товары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК Количество,
	|	Товары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Товары.СуммаПередачи / Товары.Количество < 0.01
	|			ТОГДА 0.01
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПередачи / Товары.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ЦенаПередачи,
	|	ВЫБОР
	|		КОГДА Товары.Сумма / Товары.Количество < 0.01
	|			ТОГДА 0.01
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПередачи,
	|	Товары.СуммаНДСВознаграждения,
	|	Товары.СчетДоходовБУ.Код КАК СчетДоходов,
	|	Товары.СчетРасходовБУ.Код КАК СчетРасходов,
	|	Товары.СчетУчетаБУ.Код КАК СчетУчета,
	|	Товары.КлючСтроки КАК КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Количество > 0
	|	И Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НомерСтроки,
	|	Товары.Ссылка,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.БазоваяЕдиницаИзмерения,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаВознаграждения,
	|	ВЫБОР
	|		КОГДА Товары.Количество < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Товары.Сумма,
	|	Товары.СуммаНДС,
	|	Товары.СуммаПередачи,
	|	ВЫБОР
	|		КОГДА Товары.СуммаПередачи / Товары.Количество < 0.01
	|			ТОГДА 0.01
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.СуммаПередачи / Товары.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	Товары.СуммаНДСВознаграждения,
	|	Товары.СчетДоходовБУ.Код,
	|	Товары.СчетРасходовБУ.Код,
	|	Товары.СчетУчетаБУ.Код,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(Товары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(Товары.Количество * Товары.Номенклатура.КолВоМквВКор / Товары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА Товары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(Товары.Количество / Товары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.Сумма / Товары.Количество < 0.01
	|			ТОГДА 0.01
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ,
	|	Товары.КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Покупатели.Ссылка,
	|	Покупатели.НомерСтроки,
	|	Покупатели.Покупатель,
	|	Покупатели.ВыставленСФ,
	|	Покупатели.ДатаСФ,
	|	Покупатели.СчетФактура,
	|	Покупатели.КлючСтроки,
	|	Покупатели.СчетФактура.Номер КАК НомерСФ
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК Покупатели
	|ГДЕ
	|	Покупатели.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	
	// Распределение НДС вознаграждения
	БазаРаспределенияПоСуммеВознаграждения = ТабТовары.ВыгрузитьКолонку("СуммаВознаграждения");
	
	РаспределениеНДСВознаграждения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеИБ.СуммаНДСВознаграждения, 
		БазаРаспределенияПоСуммеВознаграждения);
	Если ЗначениеЗаполнено(РаспределениеНДСВознаграждения) Тогда
		ТабТовары.ЗагрузитьКолонку(РаспределениеНДСВознаграждения, "СуммаНДСВознаграждения");
	КонецЕсли;
	
	// Таблица покупателей
	ТабПокупатели = РезультатыЗапроса[1].Выгрузить();
	СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ, НомерСФ");
	
	Для Каждого Строка Из ТабПокупатели Цикл
		НайденныеСтроки = Новый Массив();
		Строка.КлючСтроки = ТабПокупатели.Индекс(Строка) + 1;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		//НайденныеСтроки = ТабТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
			СтрокаТоваров.КлючСтроки = Строка.КлючСтроки;
		КонецЦикла;
	КонецЦикла;
	
	ТабТовары.Сортировать("НомерСтрокиДокумента Возр");
	
	ДанныеXDTO.Вставить("Товары",     ТабТовары);
	ДанныеXDTO.Вставить("Покупатели", ТабПокупатели);
КонецПроцедуры
#КонецОбласти
<<<<<<< HEAD
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетСписанияНДС";
	НоваяСтрока.СвойствоФормата = "СчетСписанияНДС";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НовыйСчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмеренияИзДокумента,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА ПеремещениеТоваровТовары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Номенклатура.КолВоМквВКор / ПеремещениеТоваровТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА ПеремещениеТоваровТовары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(ПеремещениеТоваровТовары.Количество / ПеремещениеТоваровТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					Иначе 0
	|				КОНЕЦ
	|		ИНАЧЕ Выразить(ПеремещениеТоваровТовары.Количество КАК ЧИСЛО(15,3))
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СырьеИМатериалы)
	|				ИЛИ ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие)
	|				ИЛИ ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|				ИЛИ ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукцияНаСкладе)
	|				ИЛИ ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Топливо)
	|				ИЛИ ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗапасныеЧасти)
	|				ИЛИ ПеремещениеТоваровТовары.СчетУчетаБУ = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе)
	|			ТОГДА ""СобственныеТовары""
	|		ИНАЧЕ ""ПрочиеМатериалы""
	|	КОНЕЦ КАК ТипЗапасов,
	|	ПеремещениеТоваровТовары.НовыйСчетУчетаБУ.Код КАК НовыйСчетУчета,
	|	ПеремещениеТоваровТовары.СчетУчетаБУ.Код КАК СчетУчета,
	|	ПеремещениеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков,
	|	ПеремещениеТоваровТовары.Количество КАК КоличествоВДокументе,
	|	ПеремещениеТоваровТовары.Номенклатура.КолВоМквВКор,
	|	ПеремещениеТоваровТовары.Номенклатура.КолВоШтВКор,
	|	ПеремещениеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПлатежноеПоручениеВходящее_Отправка
Процедура ДобавитьПКО_Документ_ПлатежноеПоручениеВходящее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПлатежноеПоручениеВходящее_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Ссылка КАК Ссылка,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Наименование КАК Наименование,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Организация КАК Организация,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Дата КАК Дата,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Номер КАК Номер
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка";
	
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка); 
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) Тогда
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеИБ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
	Иначе
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ЛОЖЬ);
	КонецЕсли;
	
	// Вид расчетов
	
	ВидРасчетов = "Прочее";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам Тогда
		ВидРасчетов = "Прочее";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетов = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетов = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	СубконтоКт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПлатежноеПоручениеВходящее
		|ГДЕ Ссылка = &Ссылка";
	
	Иначе
	
		Запрос.Текст ="
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ТипДоговора.Наименование = ""Служебный""
	|			ТОГДА 1
	|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов
	|	КОНЕЦ КАК КурсВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ТипДоговора.Наименование = ""Служебный""
	|			ТОГДА 1
	|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов
	|	КОНЕЦ КАК КратностьВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL 
	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДДСУПП,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями_76)
	|			ТОГДА ""76.05""
	|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код
	|	КОНЕЦ КАК СчетУчетаРасчетовСКонтрагентомУПП,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями_76)
	|			ТОГДА ""76.05""
	|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам.Код
	|	КОНЕЦ КАК СчетУчетаРасчетовПоАвансамУПП,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СчетБУ КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СчетБУ КАК СчетУчетаРасчетовПоАвансам,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СтатьяДвиженияБУ КАК СтатьяДДС
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПоступлениеДопРасходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаДопРасходов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаДопРасходов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтоимостьТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//Если СтекВыгрузки.Количество() > 1 Тогда
	//	Возврат;
	//КонецЕсли;
	
	//РасширенныеДанныеИБ = ПДР_РасширенныеДанныеИБ(ДанныеИБ);
	
	//ДанныеXDTO.Вставить("КурсВзаиморасчетов", РасширенныеДанныеИБ.КурсВзаиморасчетов);
	//ДанныеXDTO.Вставить("КратностьВзаиморасчетов", РасширенныеДанныеИБ.КратностьВзаиморасчетов);
	
	//// Склад
	//СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации, Истина);
	//ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	//ВыгрузитьПодразделениеИзРеквизитаДокумента(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, "Склад");
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//// Товары
	//Товары = РасширенныеДанныеИБ.Товары;
	//Если Товары.Количество() > 0 Тогда
	//    ОпределитьСтавкуНДС_Отправка(Товары, НДСПоСтавкам2и4);
	//	ДанныеXDTO.Вставить("Товары", Товары);
	//КонецЕсли;
	
	//// Услуги, РасшифровкаДопРасходов
	//Услуги = РасширенныеДанныеИБ.Услуги;
	//РасшифровкаДопРасходов = РасширенныеДанныеИБ.РасшифровкаДопРасходов.Скопировать();
	//РасшифровкаДопРасходов.Колонки.ДокументПоступления.Имя = "ДокументПоступленияСсылка";
	////Необходима новая колонка с произвольным типом, чтобы можно было записать туда значение типа Структура
	//РасшифровкаДопРасходов.Колонки.Добавить("ДокументПоступления");
	
	//// Не переносим как допрасходы, если есть незаполненные документы поступления.
	//НетБазыДляРаспределения = (РасшифровкаДопРасходов.Количество()=0);
	//ТипСоставногоСвойства = Неопределено;
	//Для Каждого СтрокаРасшифровкаДопРасходов Из РасшифровкаДопРасходов Цикл
	//	Если Не ЗначениеЗаполнено(СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка) Тогда
	//		НетБазыДляРаспределения = Истина;
	//		Прервать;
	//	ИначеЕсли СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка = ДанныеИБ.Ссылка Тогда
	//		//Обходим защиту от зацикливания - записываем в качестве документа поступления уже преобразованное значение ссылки
	//		СтрокаРасшифровкаДопРасходов.ДокументПоступления = ДанныеXDTO.КлючевыеСвойства;
	//		Если ТипСоставногоСвойства = Неопределено Тогда
	//			ТекПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Документ_ПоступлениеТоваровУслуг_Отправка");
	//			ТипСоставногоСвойства = ТекПКО.ТипКлючевыхСвойствОбъектаXDTO;
	//		КонецЕсли;
	//		СтрокаРасшифровкаДопРасходов.ДокументПоступления.Вставить("ТипСоставногоСвойства", ТипСоставногоСвойства);
	//	Иначе
	//		СтрокаРасшифровкаДопРасходов.ДокументПоступления = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаДопРасходов.ДокументПоступленияСсылка, "Документ_ПоступлениеТоваровУслуг_Отправка");
	//	КонецЕсли;
	//КонецЦикла;
	//	
	//Если НетБазыДляРаспределения Тогда
	//	Услуги.ЗаполнитьЗначения(Ложь, "ЭтоДопРасходы");
	//	РасшифровкаДопРасходов.Очистить();
	//КонецЕсли;
	
	//Если Услуги.Количество() > 0 Тогда
	//	ОпределитьСтавкуНДС_Отправка(Услуги, НДСПоСтавкам2и4);
	//	ДанныеXDTO.Вставить("Услуги", Услуги);
	//КонецЕсли;
	
	//Если РасшифровкаДопРасходов.Количество() > 0 Тогда
	//	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	//КонецЕсли;
	
	//ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийПТиУ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОрдер";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяЗатрат";
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатрат";
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаНДС";
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.БанковскийСчетКонтрагента);
	
	РасширенныеДанныеИБ = ПТиУ_РасширенныеДанныеИБ(ДанныеИБ);
	
	// Товары
	Если РасширенныеДанныеИБ.Товары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", РасширенныеДанныеИБ.Товары);
	КонецЕсли;
	
	// Услуги
	Если РасширенныеДанныеИБ.Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", РасширенныеДанныеИБ.Услуги);
	КонецЕсли;
	
	Если НЕ ДанныеИБ.Перевыставление Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", "ПТИУ");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ППВ_ПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ППВ_ПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППВ_ПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППВ_ПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизацииЗатраты";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППВ_ПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Контрагент = Неопределено;
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
		ДанныеXDTO.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL 
	|			ТОГДА ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДДСУПП,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовУПП,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.СуммаДокумента КАК Сумма,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СтатьяДвиженияБУ КАК СтатьяДДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СчетБУ КАК СчетУчетаРасчетов
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_ПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_ППИ_ПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_ПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_ПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_ПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка
Процедура ДобавитьПКО_Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка(ПравилаКонвертации)
=======
#Область Документ_ППВ_ПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ППВ_ПрочееПоступление_Отправка(ПравилаКонвертации)
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		//В документе банковский счет физ лица и контрагент-физлицо
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
		ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка 
		|ИЗ Справочник.Контрагенты
		|ГДЕ ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ДанныеИБ.Контрагент.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("Контрагент", Выборка.Ссылка);
			Если ЗначениеЗаполнено(ДанныеИБ.СчетКонтрагента) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка 
				|ИЗ Справочник.БанковскиеСчета
				|ГДЕ Владелец = &Ссылка
				|	И НомерСчета = &НомерСчета";
				Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
				Запрос.УстановитьПараметр("НомерСчета", ДанныеИБ.СчетКонтрагента.НомерСчета);
				ВыборкаСчет = Запрос.Выполнить().Выбрать();
				Если ВыборкаСчет.Следующий() Тогда
					ДанныеXDTO.Вставить("БанковскийСчет", ВыборкаСчет.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Поле "Контрагент" в документе не заполнено
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	#КонецОбласти
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		Для Каждого Строка Из ДанныеИБ.ПеречислениеЗаработнойПлаты Цикл
			
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Ложь;
			
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		
		КонецЦикла;
		
	//Иначе
		
	//	Если ДанныеИБ.ПеречислениеДепонентов.Количество() > 0 Тогда
	//		Для Каждого Строка Из ДанныеИБ.ПеречислениеДепонентов Цикл
	//			
	//			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	//			НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
	//			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	//			НоваяСтрокаРП.Депонент = Истина;
	//			
	//			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	//			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
	//			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
	//			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
	//		
	//		КонецЦикла;
	//	Иначе
	//		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	//		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	//		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	//		НоваяСтрокаРП.Депонент = Истина;
	//	КонецЕсли;	
	КонецЕсли;
	
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_ПеречислениеЗПНаЛС_Отправка
Процедура ДобавитьПКО_Документ_ППИ_ПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_ПеречислениеЗПНаЛС_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_ПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_ПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеXDTO.Вставить("Сотрудник", ДанныеИБ.Контрагент);
	КонецЕсли;
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.Депонент = Ложь;
	
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_ПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_ППИ_ПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_ПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_ПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_ПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	Если ДанныеXDTO.ПоказательДаты = "01.01.0001" Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_ПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_ППИ_ПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_ПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_ПрочееСписание_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_ПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	// Контрагент.
	Контрагент = ДанныеИБ.Контрагент;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	Инструкция = Новый Структура("Значение,ИмяПКО");
	Инструкция.Значение = Контрагент;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	Иначе
		Инструкция.ИмяПКО = "Справочник_КонтрагентыИзФизЛиц_Отправка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Инструкция);
	
	// Уточнение вида операции.
	ВидОперации = "";
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
	
		ВидПрочегоСписания = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			//Прочее
			ВидПрочегоСписания = "ПрочееСписание";
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
			Если Не ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
				Или ТипЗнч(ДанныеИБ.СубконтоДт1) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ВидПрочегоСписания = "ПрочееСписание";
			КонецЕсли;
		Иначе
			ВидПрочегоСписания = "ПрочееСписание";
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидОперации", ВидПрочегоСписания);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");	
	КонецЕсли;
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	СтрокаРасшифровки.СчетУчетаРасчетов     = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_ПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_ППИ_ПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_ПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_ПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_ПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоДт3);
		КонецЕсли;
	КонецЕсли;
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		СтрокаРасшифровки.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_РасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ППИ_РасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_РасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_РасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_РасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	Иначе
		
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Ссылка КАК Ссылка,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Наименование КАК Наименование,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Организация КАК Организация,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Дата КАК Дата,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Номер КАК Номер
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = &Ссылка";
	
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка); 
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) Тогда
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ДанныеИБ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах);
	Иначе
		ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", ЛОЖЬ);
	КонецЕсли;
	
	ВидРасчетовСКонтрагентом = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		ВидРасчетовСКонтрагентом = "Прочее";	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовСКонтрагентом = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю И ДанныеИБ.ВыгружатьКакВозврат Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	КонецЕсли;
	
	Если ВидРасчетовСКонтрагентом = "" Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентом);
	
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СтатьяДвиженияБУ КАК СтатьяДДС,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками_76)
	|			ТОГДА ""Аванс""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками_76)
	|			ТОГДА ""Долг""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
	|			ТОГДА ""КраткосрочныеКредиты""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
	|			ТОГДА ""КраткосрочныеЗаймы""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
	|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
	|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
	|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
	|			ТОГДА ""ДолгосрочныеКредиты""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
	|			ТОГДА ""ДолгосрочныеЗаймы""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
	|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
	|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
	|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
	|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
	|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВидРасчетовРасширенный,
	|	РасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СчетБУ КАК СчетУчетаРасчетовСКонтрагентом,
	|	РасшифровкаПлатежа.ВариантДвиженияДенежныхСредств.СчетБУ КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ППИ_РасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ППИ_РасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ППИ_РасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ППИ_РасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийПКО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ППИ_РасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ФизЛицо);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПТИУ_Перевыставление_Отправка
Процедура ДобавитьПКО_Документ_ПТИУ_Перевыставление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПТИУ_Перевыставление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПТИУ_Перевыставление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОрдер";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяЗатрат";
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаНДС";
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПТИУ_Перевыставление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПриемНаКомиссию");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Строка(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом));
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоАвансам", Строка(ДанныеИБ.СчетУчетаРасчетовПоАвансам));
	
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	//ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	
	РасширенныеДанныеИБ = ПТиУ_Перевыставление(ДанныеИБ);
	
	// Услуги
	Если РасширенныеДанныеИБ.Услуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", РасширенныеДанныеИБ.Услуги);
	КонецЕсли;
	
	Если ДанныеИБ.Перевыставление Тогда 
		ДанныеXDTO.Вставить("AdditionalInfo", "Перевыставление");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРеализацияТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтпускПроизвел";
	НоваяСтрока.СвойствоФормата = "ОтпускПроизвел";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДСПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасчетовСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДСПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	//ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	
	//ДанныеВзаиморасчетов
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам.Код КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", Неопределено);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", Выборка.СчетУчетаРасчетовСКонтрагентом);
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоАвансам", Выборка.СчетУчетаРасчетовПоАвансам);
	
	//ВидОперации
	ВидОперации = "РеализацияКлиенту";
	Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПередачаНаКомиссию";
	КонецЕсли;	
	
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.Вставить("Сумма",ДанныеИБ.СуммаДокумента - ДанныеИБ.Компенсация.Итог("КРаспределению"));
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СчетУчетаБУ = &Счет004
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Номенклатура.КолВоМквВКор / РеализацияТоваровУслугТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Количество / РеализацияТоваровУслугТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Количество КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.Количество КАК КоличествоПоДокументу,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоДокументу
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура.БазоваяЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	РеализацияТоваровУслугВозвратнаяТара.Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	РеализацияТоваровУслугВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
		i = 0;
		Пока i < ТаблицаТовары.Количество() Цикл 
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Товары[i].Номенклатура);
			i = i + 1;
		КонецЦикла;
	КонецЕсли;
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидСчетаФактурыВыставленного";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выставлен";
	НоваяСтрока.СвойствоФормата = "Выставлен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыставления";
	НоваяСтрока.СвойствоФормата = "ДатаВыставления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комитент";
	НоваяСтрока.СвойствоФормата = "КонечныйПокупатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПлатежноРасчетныеДокументы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПлатежноРасчетныеДокументы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И ДанныеИБ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Организация") Тогда	
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", НачалоДня(ДанныеИБ.Дата));
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	ТипОснования = ТипЗнч(ДанныеИБ.ДокументОснование);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтрагентСсылка = ДанныеИБ.Контрагент;
	Иначе
		КонтрагентСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Контрагент");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	
	Если ДанныеИБ.Исправление И ЗначениеЗаполнено(ДанныеИБ.СчетФактураОснование) Тогда
		ДанныеXDTO.Вставить("ДатаИсправляемогоКорректировочногоДокумента", ДанныеИБ.СчетФактураОснование.Дата);
		ДанныеXDTO.Вставить("НомерИсправляемогоКорректировочногоДокумента", ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеИБ.СчетФактураОснование.Номер, Ложь, Истина));
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаИсправленияИсходногоДокумента",  Неопределено);
	ДанныеXDTO.Вставить("НомерИсправленияИсходногоДокумента", Неопределено);
	ДанныеXDTO.Вставить("НомерИсходногоДокумента",            Неопределено);
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента",             Неопределено);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Контрагент);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДоговорКонтрагента);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДокументОснование);
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Ответственный);
	
	
	// Итоговые суммы и ставка НДС.
	МассивСФ = Новый Массив;
	МассивСФ.Добавить(ДанныеИБ.Ссылка);
	
	// Документы-основания - заполненность проверяется при выполнении ПОД.
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Док.ДокументОснование КАК ДокументОснованиеСсылка,
		|	Док.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
		|	Док.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
		|	Док.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
		|	Док.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДокументыОснования = Запрос.Выполнить().Выгрузить();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	Для Каждого СтрокаОснование Из ДокументыОснования Цикл
		
		Если ЗначениеЗаполнено(СтрокаОснование.ДатаИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("ДатаИсходногоДокумента", СтрокаОснование.ДатаИсходногоДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОснование.НомерИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("НомерИсходногоДокумента", СтрокаОснование.НомерИсходногоДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОснование.НомерИсправленияИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("НомерИсправленияИсходногоДокумента", СтрокаОснование.НомерИсправленияИсходногоДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОснование.ДатаИсправленияИсходногоДокумента) Тогда
			ДанныеXDTO.Вставить("ДатаИсправленияИсходногоДокумента", СтрокаОснование.ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
	
		ИмяПКО = ИмяПКОДляДокументаОснованияСФВыданного(СтрокаОснование.ДокументОснованиеСсылка);
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",СтрокаОснование.ДокументОснованиеСсылка,ИмяПКО);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Если ДанныеИБ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
	Иначе
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаРеализацию");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Выставлен", ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления));
	
	//Руководитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументыОснования, "Руководитель");
	//ДанныеXDTO.Вставить("Руководитель", Руководитель.ФизическоеЛицо);
	//ГлавныйБухгалтер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументыОснования, "ГлавныйБухгалтер");
	//ДанныеXDTO.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтер.ФизическоеЛицо);
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.КодСпособаВыставления = 1,"ВЭлектронномВиде", "НаБумажномНосителе"));
	
	ПлатРасчДокументы = Новый ТаблицаЗначений;
	ПлатРасчДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатРасчДокументы.Колонки.Добавить("НомерДокумента");
	Если НЕ (ДанныеИБ.ДатаНомерДокументовОплаты.Количество() = 0) Тогда
		Для Каждого СтрокаДокумента ИЗ ДанныеИБ.ДатаНомерДокументовОплаты Цикл
			Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПлатежноРасчетногоДокумента) тогда
				СтрокаПлатРасчДокумент = ПлатРасчДокументы.Добавить();
				СтрокаПлатРасчДокумент.ДатаДокумента = СтрокаДокумента.ДатаПлатежноРасчетногоДокумента;
				СтрокаПлатРасчДокумент.НомерДокумента = СтрокаДокумента.НомерПлатежноРасчетногоДокумента;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПлатРасчДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидСчетаФактурыПолученного";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправления";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//Документ основание
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ДокументОснование
		|ИЗ 
		|	Документ.СчетФактураПолученный.ДокументыОснования
		|ГДЕ 
		|	Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыборкаТЧ = Запрос.Выполнить().Выбрать();
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	
	Пока ВыборкаТЧ.Следующий() Цикл
		
		ДокументОснование = ВыборкаТЧ.ДокументОснование;
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
	
		ИмяПКО = ИмяПКОДляДокументаОснованияСФПолученного(ДокументОснование);
			
		СтрокаОснование = ДокументыОснования.Добавить();
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДокументОснование,ИмяПКО);
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	ДанныеXDTO.Вставить("ВидСчетаФактуры",    "НаПоступление");
	
	Если ДанныеИБ.Корректировочный Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "Корректировочный");
	КонецЕсли;	
		
	// Используются данные первой строки таблицы документов-оснований.
	Для Каждого ДокументыОснованияСтрока Из ДанныеИБ.ДокументыОснования Цикл
		ДанныеXDTO.Вставить("ДатаИсходногоДокумента",  ДокументыОснованияСтрока.ДатаИсходногоДокумента);
		ДанныеXDTO.Вставить("НомерИсходногоДокумента", ДокументыОснованияСтрока.НомерИсходногоДокумента);
		ДанныеXDTO.Вставить("ДатаИсправленияИсходногоДокумента",  ДокументыОснованияСтрока.ДатаИсправленияИсходногоДокумента);
		ДанныеXDTO.Вставить("НомерИсправленияИсходногоДокумента", ДокументыОснованияСтрока.НомерИсправленияИсходногоДокумента);
		Прервать;
	КонецЦикла;
	
	Если ДанныеИБ.ПолученВЭлектронномВиде Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
	
	#Область ВычислениеИтоговыхСумм
	
	СуммаДокумента = 0;
	СуммаНДС       = 0;
	
	МассивДокументовОснований = ДанныеИБ.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументовОснований", МассивДокументовОснований);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.СуммаНДСВознаграждения КАК СуммаНДСДокумента,
	|	Док.СуммаВознаграждения КАК СуммаДокумента
	|ПОМЕСТИТЬ ТаблицаСумм
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.СуммаНДС,
	|	Док.Ссылка.СуммаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.СуммаНДС,
	|	Док.Ссылка.СуммаДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.СуммаНДС,
	|	Док.Ссылка.СуммаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.СуммаНДС,
	|	Док.Ссылка.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.СуммаНДС,
	|	Док.Сумма
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.СуммаНДС,
	|	Док.Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументовОснований)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСумм.СуммаНДСДокумента) КАК СуммаНДСДокумента,
	|	СУММА(ТаблицаСумм.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	ТаблицаСумм КАК ТаблицаСумм
	|ИТОГИ ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаНДС       = Выборка.СуммаНДСДокумента;
	КонецЕсли;
	
	#КонецОбласти
	
	ДанныеXDTO.Вставить("Сумма",    СуммаДокумента);
	ДанныеXDTO.Вставить("СуммаНДС", СуммаНДС);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТребованиеНакладная_Отправка
Процедура ДобавитьПКО_Документ_ТребованиеНакладная_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТребованиеНакладная_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ПодразделенияОрганизаций_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиЗатрат_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалы.Номенклатура,
	|	ТребованиеНакладнаяМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТребованиеНакладнаяМатериалы.ЕдиницаИзмерения,
	|	ТребованиеНакладнаяМатериалы.Количество,
	|	ТребованиеНакладнаяМатериалы.Ссылка.ПодразделениеОрганизации КАК ПодразделениеЗатрат,
	|	ТребованиеНакладнаяМатериалы.ВариантЗатрат.АналитикаЗатрат КАК СтатьяЗатрат,
	|	ТребованиеНакладнаяМатериалы.ВариантЗатрат.СчетЗатратБУ КАК СчетЗатрат,
	|	ВЫБОР
	|		КОГДА ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СырьеИМатериалы)
	|				ИЛИ ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие)
	|				ИЛИ ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах)
	|				ИЛИ ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукцияНаСкладе)
	|				ИЛИ ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Топливо)
	|				ИЛИ ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗапасныеЧасти)
	|				ИЛИ ТребованиеНакладнаяМатериалы.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе)
	|			ТОГДА ""СобственныеТовары""
	|		ИНАЧЕ ""ПрочиеМатериалы""
	|	КОНЕЦ КАК ТипЗапасов,
	|	ТребованиеНакладнаяМатериалы.Счет.Код КАК СчетУчета
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПКО_Справочник_Банки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.СвойствоФормата = "ВидСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	//Если ЗначениеЗаполнено(ДанныеИБ.ОсновнойБанковскийСчет) Тогда
	//	ДанныеXDTO.Вставить("Additionalnfo", Строка(ДанныеИБ.ОсновнойБанковскийСчет.УникальныйИдентификатор()) );
	//КонецЕсли;
	
	//Если Владелец <> Неопределено Тогда
	//    ИмяПКО = "Справочник_Контрагенты_Отправка";
	//    Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
	//        ИмяПКО = "Справочник_Контрагенты_Отправка";
	//    	ДанныеXDTO.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Владелец, ИмяПКО)); 
	//    ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
	//        ИмяПКО = "Справочник_Организации_Отправка";
	//    	ДанныеXDTO.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", Владелец, ИмяПКО));   	       
	//    КонецЕсли;
	//КонецЕсли;
	
	// Владелец
	
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизЛица_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.СвойствоФормата = "ВидСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПКО_Справочник_Валюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры

Процедура ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипНоменклатуры", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ТипНоменклатуры, "Перечисление_ТипыНоменклатуры_Отправка"));
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Отправка
Процедура ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Договоры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчет";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговоровКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ИспользуетсяПриОбменеДанными = Истина;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("AdditionalInfo", Строка(ДанныеИБ.Владелец.УникальныйИдентификатор()));
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Отправка
Процедура ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Код", СОКРЛП(ДанныеИБ.Код));
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительноеОписание";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮрФизЛицо_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ОсновнойБанковскийСчет) Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", Строка(ДанныеИБ.ОсновнойБанковскийСчет.УникальныйИдентификатор()));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Отправка
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Группа_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Группа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Группа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Группа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Группа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС_ОТправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("AdditionalInfo", Строка(ДанныеИБ.ВидНоменклатуры.УникальныйИдентификатор()));
	
	ДанныеXDTO.Вставить("ТипНоменклатуры", ДанныеИБ.ВидНоменклатуры.ТипНоменклатуры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
	//	ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796").Наименование);
	//КонецЕсли;
		
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮрФизЛицо_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ОсновнойБанковскийСчет) Тогда
		ДанныеXDTO.Вставить("AdditionalInfo", Строка(ДанныеИБ.ОсновнойБанковскийСчет.УникальныйИдентификатор()) );
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПодразделенияОрганизаций_Отправка
Процедура ДобавитьПКО_Справочник_ПодразделенияОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПодразделенияОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПодразделенияОрганизаций_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";

КонецПроцедуры

Процедура ПКО_Справочник_ПодразделенияОрганизаций_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТаблицаДопРеквизиты = новый ТаблицаЗначений;
	ТаблицаДопРеквизиты.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизиты.Колонки.Добавить("ЗначениеСвойства");
	
	ТекСвойство = Новый Структура("Наименование", "Владелец");
	
	ТекЗначение = ДанныеИБ.Владелец;
	
	ТекущаяСтрокаДопРеквизиты = ТаблицаДопРеквизиты.Добавить();
	ТекущаяСтрокаДопРеквизиты.Свойство = ТекСвойство;
	ТекущаяСтрокаДопРеквизиты.ЗначениеСвойства = ТекЗначение;
	
	ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизиты);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизЛица_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыИРасходы_Отправка
Процедура ДобавитьПКО_Справочник_ПрочиеДоходыИРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПрочиеДоходыИРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВГ_ВариантыСтатейЗатрат;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Группа_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Группа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Группа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Группа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыСкладов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Группа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиДДС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВГ_СтатьиДвиженияДенежныхСредствБУ;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиЗатрат_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиЗатрат_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиЗатрат_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПКО_Справочник_СтраныМира_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ТипыЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ПолФизическихЛиц_Отправка";

КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыОперацийИсправленияПоступленияРеализации.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийИсправленияПоступленияРеализации";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийИсправленияПоступленияРеализации";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийПоступлениеДопРасходов.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПоступлениеДопРасходов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеДопРасходов;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации, "ПокупкаУПоставщика");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыОперацийРеализацияТоваровУслуг.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРеализацияТоваровУслуг";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРеализацияТоваров;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "РеализацияКлиенту");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, "ПередачаНаКомиссию");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, "РеализацияКлиенту");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидСчетаФактурыВыставленного.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидСчетаФактурыВыставленного";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыВыставленного;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, "Корректировочный");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "НаАванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, "НаАвансКомитента");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент, "НалоговыйАгент");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "НаРеализацию");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, "СуммовыеРазницы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидСчетаФактурыПолученного.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидСчетаФактурыПолученного";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыПолученного;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный, "Корректировочный");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаАванс, "НаАванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаПоступление");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыДоговоровКонтрагентов_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыДоговоровКонтрагентов_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
		ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.КредитыЗаймы, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийВозвратТоваровОтПокуп.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийВозвратТоваровОтПокуп";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровОтПокупателя;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратОтПокупателя";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование, "ВозвратОтКлиента");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия, "ВозвратОтКлиента");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийВозвратТоваровПоставщику.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийВозвратТоваровПоставщику";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратПоставщику";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия, "ВозвратКомитенту");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия, "ВозвратПоставщику");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийПКО.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийПКО";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
		ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником, "Подотчет");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками, "Займы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийПТиУ_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийПТиУ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВГ_ПокупкаКомиссия, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия, "ПриемНаКомиссию");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыСкладов_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыСкладов_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСкладов;
		ПравилоКонвертации.ТипXDTO = "ТипыСкладов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.НТТ, "НеавтоматизированнаяТорговаяТочка");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Оптовый, "Оптовый");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Розничный, "Розничный");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ПолФизическихЛиц_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ПолФизическихЛиц_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
		ПравилоКонвертации.ТипXDTO = "Пол";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Женский, "Женский");
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Мужской, "Мужской");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СтавкиНДС_ОТправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_СтавкиНДС_ОТправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
		ПравилоКонвертации.ТипXDTO = "СтавкиНДС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС2");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС2_102");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыНоменклатуры_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыНоменклатуры_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Комплект, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Набор, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮрФизЛицо_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮрФизЛицо_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// СпособыРасчетаКомиссионногоВознаграждения.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "СпособыРасчетаКомиссионногоВознаграждения";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
		ПравилоКонвертации.ТипXDTO = "СпособыРасчетаКомиссионногоВознаграждения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли, "ПроцентОтСуммыПродажи");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПередачи, "ПроцентОтСуммыПродажи");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВозвратТовараПоставщику(ДанныеИБ)
	Результат = Новый Структура;
			
	ДанныеТаблицыТовары	 = "ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Цена КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Сумма КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщикуТовары.СчетУчетаБУ) КАК СчетУчета,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщикуТовары.СчетУчетаНДС) КАК СчетУчетаНДС,
	|	ПРЕДСТАВЛЕНИЕ(ВозвратТоваровПоставщикуТовары.ДокументПоступления) КАК ДокументПоступления,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки как НомерСтрокиДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|	И ВозвратТоваровПоставщикуТовары.Ссылка.Дата = &Дата";
			
	
	ТекстЗапроса = ДанныеТаблицыТовары;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	
	Результат.Вставить("Товары", ТаблицаТовары);
	
	Возврат Результат;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		ИмяПКОГруппа = "Справочник_КонтрагентыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Банки") Тогда
		ИмяПКО = "Справочник_Банки";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ИмяПКО = "Справочник_Подразделения_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа_Отправка";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ ИЗ ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Функция ЗаполнитьДанныеКорректировкиПоступленияТоваров(ДанныеИБ)
	Результат = Новый Структура;
		
		#Область ФрагментЗапросаТоварыДокумента
		// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
		// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика
		ТоварыДокумента = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Товары.НомерСтроки КАК ЧИСЛО(10,0)) КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(Товары.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(Товары.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
		|	ВЫРАЗИТЬ(Товары.КоличествоМест КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(Товары.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
		|	ПРЕДСТАВЛЕНИЕ(Товары.СчетУчетаБУ) КАК СчетУчета,
		|	ПРЕДСТАВЛЕНИЕ(Товары.СчетУчетаНДС) КАК СчетУчетаНДС,
		|	Товары.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступленияРеализации,
		|	ВЫРАЗИТЬ(Товары.КоличествоДоИзменения КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
		|	ВЫРАЗИТЬ(Товары.КоличествоДоКорректировки КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
		|	Товары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
		|	ВЫРАЗИТЬ(Товары.СуммаДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаДоИзменения,
		|	ВЫРАЗИТЬ(Товары.СуммаДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаДоКорректировки,
		|	ВЫРАЗИТЬ(Товары.СуммаНДСДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоИзменения,
		|	ВЫРАЗИТЬ(Товары.СуммаНДСДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоКорректировки,
		|	ВЫРАЗИТЬ(Товары.ЦенаДоИзменения КАК ЧИСЛО(15, 3)) КАК ЦенаДоИзменения,
		|	ВЫРАЗИТЬ(Товары.ЦенаДоКорректировки КАК ЧИСЛО(15, 3)) КАК ЦенаДоКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		#КонецОбласти
		
		#Область ФрагментЗапросаДанныеТаблицыУслуги
		// Работы и услуги.
		// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
		// Обмен не учитывает расхождения при поступлении работ и услуг, поэтому данные получаем из ТЧ Товары.
		
		ДанныеТаблицыУслуги = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Услуги.НомерСтроки КАК ЧИСЛО(10,0)) КАК НомерСтрокиДокумента,
		|	Услуги.Номенклатура КАК Номенклатура,
		|	ВЫРАЗИТЬ(Услуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫРАЗИТЬ(Услуги.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
		|	Услуги.СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(Услуги.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
		|	ВЫРАЗИТЬ(Услуги.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
		|	ПРЕДСТАВЛЕНИЕ(Услуги.СчетУчетаНДС) КАК СчетУчетаНДС,
		|	Услуги.Содержание КАК Содержание,
		|	Услуги.ПодразделениеОрганизации КАК ПодразделениеЗатрат,
		|	Услуги.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ПРЕДСТАВЛЕНИЕ(Услуги.СчетЗатрат) КАК СчетЗатрат,
		|	Услуги.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступленияРеализации,
		|	ВЫРАЗИТЬ(Услуги.КоличествоДоИзменения КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
		|	ВЫРАЗИТЬ(Услуги.КоличествоДоКорректировки КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
		|	Услуги.СодержаниеДоИзменения,
		|	Услуги.СтавкаНДСДоИзменения,
		|	ВЫРАЗИТЬ(Услуги.СуммаДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаДоИзменения,
		|	ВЫРАЗИТЬ(Услуги.СуммаДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаДоКорректировки,
		|	ВЫРАЗИТЬ(Услуги.СуммаНДСДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоИзменения,
		|	ВЫРАЗИТЬ(Услуги.СуммаНДСДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоКорректировки,
		|	ВЫРАЗИТЬ(Услуги.ЦенаДоИзменения КАК ЧИСЛО(15, 3)) КАК ЦенаДоИзменения,
		|	ВЫРАЗИТЬ(Услуги.ЦенаДоКорректировки КАК ЧИСЛО(15, 3)) КАК ЦенаДоКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления.Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Ссылка = &Ссылка
		|	И Услуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";					  
		
		#КонецОбласти
		ТекстЗапроса = ТоварыДокумента
			         + ДанныеТаблицыУслуги;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
			
		ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		
		
		Результат.Вставить("Товары", ТаблицаТовары);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ЗаполнитьДанныеКорректировкиРеализацииТоваров(ДанныеИБ)
	Результат = Новый Структура;
		
		#Область ФрагментЗапросаТоварыДокумента
		// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
		// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика
		ТоварыДокумента = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.НомерСтроки КАК ЧИСЛО(10, 0)) КАК НомерСтрокиДокумента,
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество * КорректировкаРеализацииТовары.Номенклатура.КолВоМквВКор / КорректировкаРеализацииТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА КорректировкаРеализацииТовары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество / КорректировкаРеализацииТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Количество КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК Количество,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
	|	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоМест КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
	|	ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.СчетУчетаБУ) КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоИзменения * КорректировкаРеализацииТовары.Номенклатура.КолВоМквВКор / КорректировкаРеализацииТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА КорректировкаРеализацииТовары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоИзменения / КорректировкаРеализацииТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоИзменения КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК КоличествоДоИзменения,
	|	ВЫБОР
	|		КОГДА ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.ЕдиницаИзмерения) <> ПРЕДСТАВЛЕНИЕ(КорректировкаРеализацииТовары.Номенклатура.ЕдиницаХраненияОстатков)
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.ЕдиницаИзмерения.Наименование = ""шт""
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоКорректировки * КорректировкаРеализацииТовары.Номенклатура.КолВоМквВКор / КорректировкаРеализацииТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					КОГДА КорректировкаРеализацииТовары.ЕдиницаИзмерения.Наименование = ""кор.""
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоКорректировки / КорректировкаРеализацииТовары.Номенклатура.КолВоШтВКор КАК ЧИСЛО(15, 3))
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииТовары.КоличествоДоКорректировки КАК ЧИСЛО(15, 3))
	|	КОНЕЦ КАК КоличествоДоКорректировки,
	|	КорректировкаРеализацииТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.СуммаДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.СуммаДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаДоКорректировки,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.СуммаНДСДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.СуммаНДСДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоКорректировки,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.ЦенаДоИзменения КАК ЧИСЛО(15, 3)) КАК ЦенаДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.ЦенаДоКорректировки КАК ЧИСЛО(15, 3)) КАК ЦенаДоКорректировки,
	|	КорректировкаРеализацииТовары.СчетДоходовБУ.Код КАК СчетДоходов,
	|	КорректировкаРеализацииТовары.СчетРасходовБУ.Код КАК СчетРасходов
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &Ссылка
	|	И КорректировкаРеализацииТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		#КонецОбласти
		
		#Область ФрагментЗапросаДанныеТаблицыУслуги
		// Работы и услуги.
		// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
	
		ДанныеТаблицыУслуги = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.НомерСтроки КАК ЧИСЛО(10, 0)) КАК НомерСтрокиДокумента,
	|	КорректировкаРеализацииУслуги.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииУслуги.Содержание,
	|	КорректировкаРеализацииУслуги.СодержаниеДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.КоличествоДоИзменения КАК ЧИСЛО(15, 3)) КАК КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.КоличествоДоКорректировки КАК ЧИСЛО(15, 3)) КАК КоличествоДоКорректировки,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
	|	КорректировкаРеализацииУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
	|	КорректировкаРеализацииУслуги.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.СуммаДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.СуммаДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаДоКорректировки,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.СуммаНДСДоИзменения КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки КАК ЧИСЛО(15, 3)) КАК СуммаНДСДоКорректировки,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.ЦенаДоИзменения КАК ЧИСЛО(15, 3)) КАК ЦенаДоИзменения,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.ЦенаДоКорректировки КАК ЧИСЛО(15, 3)) КАК ЦенаДоКорректировки,
	|	КорректировкаРеализацииУслуги.СчетДоходовБУ.Код КАК СчетДоходов,
	|	КорректировкаРеализацииУслуги.СчетРасходовБУ.Код КАК СчетРасходов
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &Ссылка
	|	И КорректировкаРеализацииУслуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";					  
		
		#КонецОбласти
		ТекстЗапроса = ТоварыДокумента
			         + ДанныеТаблицыУслуги;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
			
		ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		
		
		Результат.Вставить("Товары", ТаблицаТовары);
		Результат.Вставить("Услуги", ТаблицаУслуги);
		
		Возврат Результат;
КонецФункции
Функция ИмяПКОДляДокументаОснованияСФВыданного(ДокументОснование)
	ИмяПКО = "";
	
	ТипСсылки = ТипЗнч(ДокументОснование);
	
	Если ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
	//	ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
	//	ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ИмяПКОДляДокументаОснованияСФПолученного(ДокументОснование)
	ТипСсылки = ТипЗнч(ДокументОснование);
	ИмяПКО = "";
	
	Если ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтКлиента_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация") = 
			Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
			ИмяПКО = "Документ_ПУПАЧерезПодотчетноеЛицо_Отправка";
		Иначе
			ИмяПКО = "Документ_ПоступлениеУслугПрочихАктивов_Отправка";
		КонецЕсли;
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация") = 
			Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
			ИмяПКО = "Документ_ПТУЧерезПодотчетноеЛицо_Отправка";
		Иначе
			ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
		КонецЕсли;
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Функция ОпределитьТипЗапасовПоСчетуУчета(СчетУчета)
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат "СобственныеТовары";
	КонецЕсли;
		
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах Тогда
		Возврат "СобственныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеТоварыОтгруженные 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости Тогда
		
		Возврат "КомиссионныеТовары";
	
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) Тогда
		Если СчетУчета = ПланыСчетов.Хозрасчетный.Тара Тогда
			Возврат "ПрочиеМатериалы";
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			Возврат "СырьеИМатериалы";
		ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации) Тогда
			Возврат "СпецоснасткаИСпецодеждаНаСкладе";
		ИначеЕсли СчетУчета.Предопределенный Тогда
			//Все остальные предопределенные субсчета 10-го счета соответствуют именам типов запасов
			Возврат СчетУчета.ИмяПредопределенныхДанных;	
		КонецЕсли;
	КонецЕсли;
	Возврат "СобственныеТовары";
КонецФункции
Функция ПДР_РасширенныеДанныеИБ(ДанныеИБ)
	//ДОРАБОТАТЬ!
	
	//Результат = Новый Структура;
	
	//#Область ФрагментЗапросаТоварыДокумента
	//// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
	//// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика
	//ТоварыДокумента = "
	//|ВЫБРАТЬ
	//|	ПоступлениеДопРасходовТовары.ДокументПартии КАК ДокументПоступления,
	//|	ВЫРАЗИТЬ(ПоступлениеДопРасходовТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	//|	ПоступлениеДопРасходовТовары.Номенклатура КАК Номенклатура,
	//|	ВЫРАЗИТЬ(ПоступлениеДопРасходовТовары.СуммаТовара КАК ЧИСЛО(15, 3)) КАК СтоимостьТоваров,
	//|	ВЫРАЗИТЬ(ПоступлениеДопРасходовТовары.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
	//|	ВЫРАЗИТЬ(ПоступлениеДопРасходовТовары.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
	//|	ПРЕДСТАВЛЕНИЕ(ПоступлениеДопРасходовТовары.СчетУчетаБУ) КАК СчетУчета,
	//|	ПРЕДСТАВЛЕНИЕ(ПоступлениеДопРасходовТовары.СчетУчетаНДС) КАК СчетУчетаНДС
	//|ИЗ
	//|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	//|ГДЕ
	//|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	
	
	//#КонецОбласти
	
	
	//// РасшифровкаДопРасходов
	//// Номенклатура, Количество, СтоимостьТоваров, Сумма, СуммаНДС, ДокументПоступления
	//РасшифровкаДопРасходов = ДоходыИРасходыСервер.ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДанныеИБ.Ссылка);
	//// Удаление строк с пустыми суммами из расшифровки.
	//КоличествоСтрокДопРасходы = РасшифровкаДопРасходов.Количество();
	//Для НомерСтроки = 1 По КоличествоСтрокДопРасходы Цикл
	//	Индекс = КоличествоСтрокДопРасходы - НомерСтроки;
	//	Если Окр(РасшифровкаДопРасходов[Индекс].Сумма,2) = 0 Тогда
	//		РасшифровкаДопРасходов.Удалить(Индекс);
	//	КонецЕсли;
	//КонецЦикла;
	//Результат.Вставить("РасшифровкаДопРасходов", РасшифровкаДопРасходов);
	
	//ТекстЗапроса = ТоварыДокумента;
	
	//	Запрос = Новый Запрос(ТекстЗапроса);
	//	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	//	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	//	Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.ВалютаДокумента);
	//	Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
	//	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	//	
	//ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	
	//Результат.Вставить("Товары", ТаблицаТовары);
	
	//Возврат Результат;
КонецФункции
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	//Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	//Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетКонтрагента);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежноеПоручениеИсходящее.СтатусСоставителя КАК СтатусСоставителя,
	|	ПлатежноеПоручениеИсходящее.КодБК КАК ПоказательКБК,
	|	ПлатежноеПоручениеИсходящее.ПоказательОснования КАК ПоказательОснования,
	|	ПлатежноеПоручениеИсходящее.ПоказательПериода КАК ПоказательПериода,
	|	ПлатежноеПоручениеИсходящее.ПоказательНомера КАК ПоказательНомера,
	|	ПлатежноеПоручениеИсходящее.ПоказательДаты КАК ПоказательДаты,
	|	ПлатежноеПоручениеИсходящее.ПоказательТипа КАК ПоказательТипа,
	|	ПлатежноеПоручениеИсходящее.КодОКАТО КАК ОКАТО";
	КонецЕсли;
	
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежноеПоручениеИсходящее.ОчередностьПлатежа КАК Очередность,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежноеПоручениеИсходящее.ИдентификаторПлатежа КАК Код
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		//Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеИБ.ПоказательДаты) Тогда
			ДанныеXDTO.ПоказательДаты =	Формат(ДанныеXDTO.ПоказательДаты, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Функция ПТиУ_Перевыставление(ДанныеИБ)
	Результат = Новый Структура;
	
	#Область ФрагментЗапросаДанныеТаблицыУслуги
	// Работы и услуги.
	// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
	// Обмен не учитывает расхождения при поступлении работ и услуг, поэтому данные получаем из ТЧ Товары.
	ДанныеТаблицыУслуги = "ВЫБРАТЬ
	                      |	ПоступлениеТоваровУслугУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	                      |	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
	                      |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	                      |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
	                      |	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
	                      |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
	                      |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
	                      |	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваровУслугУслуги.СчетУчетаНДС) КАК СчетУчетаНДС,
	                      |	ПоступлениеТоваровУслугУслуги.Содержание КАК Содержание,
	                      |	ПоступлениеТоваровУслугУслуги.ПодразделениеОрганизации КАК ПодразделениеЗатрат,
	                      |	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
	                      |	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваровУслугУслуги.СчетЗатрат) КАК СчетЗатрат,
	                      |	""76.09"" КАК СчетРасчетов,
	                      |	ВЫБОР
	                      |		КОГДА ТИПЗНАЧЕНИЯ(ПоступлениеТоваровУслугУслуги.Субконто1) = ТИП(Справочник.Контрагенты)
	                      |			ТОГДА ПоступлениеТоваровУслугУслуги.Субконто1
	                      |		ИНАЧЕ """"
	                      |	КОНЕЦ КАК Контрагент,
	                      |	ВЫБОР
	                      |		КОГДА ТИПЗНАЧЕНИЯ(ПоступлениеТоваровУслугУслуги.Субконто2) = ТИП(Справочник.ДоговорыКонтрагентов)
	                      |			ТОГДА ПоступлениеТоваровУслугУслуги.Субконто2
	                      |		ИНАЧЕ """"
	                      |	КОНЕЦ КАК ДоговорКонтрагента
	                      |ИЗ
	                      |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	                      |ГДЕ
	                      |	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	                      |	И ПоступлениеТоваровУслугУслуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	                      |	И ПоступлениеТоваровУслугУслуги.Ссылка.Перевыставление = ИСТИНА";					  
	
	#КонецОбласти
	ТекстЗапроса = ДанныеТаблицыУслуги;
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаУслуги = РезультатыЗапроса[0].Выгрузить();
	
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Результат;
КонецФункции
Функция ПТиУ_РасширенныеДанныеИБ(ДанныеИБ)
	Результат = Новый Структура;
	
	#Область ФрагментЗапросаТоварыДокумента
	// Услуги всегда получаются из ТЧ Товары, а товары - в зависимости от признака расхождений.
	// Если нет расхождений - из ТЧ Товары, если есть - из ТЧ ТоварыПоДаннымПоставщика
	ТоварыДокумента = "	
						  | ВЫБРАТЬ
		                  |	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		                  |	Товары.Номенклатура КАК Номенклатура,
		                  |	ВЫРАЗИТЬ(Товары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		                  |	ВЫРАЗИТЬ(Товары.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
		                  |	Товары.СтавкаНДС КАК СтавкаНДС,
		                  |	ВЫРАЗИТЬ(Товары.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
		                  |	ВЫРАЗИТЬ(Товары.КоличествоМест КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
		                  |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		                  |	ВЫРАЗИТЬ(Товары.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
		                  |	ПРЕДСТАВЛЕНИЕ(Товары.СчетУчетаБУ) КАК СчетУчета,
		                  |	ПРЕДСТАВЛЕНИЕ(Товары.СчетУчетаНДС) КАК СчетУчетаНДС
		                  |ИЗ
		                  |	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
		                  |ГДЕ
		                  |	Товары.Ссылка = &Ссылка
		                  |	И Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	#КонецОбласти
	#Область ФрагментЗапросаДанныеТаблицыУслуги
	// Работы и услуги.
	// Допрасходы - это услуги и работы со статьей расходов, распределяемых на себестоимость.
	// Обмен не учитывает расхождения при поступлении работ и услуг, поэтому данные получаем из ТЧ Товары.
	ДанныеТаблицыУслуги = "
						  | ВЫБРАТЬ
		                  |	ПоступлениеТоваровУслугУслуги.НомерСтроки КАК НомерСтрокиДокумента,
		                  |	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		                  |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
		                  |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Сумма КАК ЧИСЛО(15, 3)) КАК Сумма,
		                  |	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		                  |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.СуммаНДС КАК ЧИСЛО(15, 3)) КАК СуммаНДС,
		                  |	ВЫРАЗИТЬ(ПоступлениеТоваровУслугУслуги.Цена КАК ЧИСЛО(15, 3)) КАК Цена,
		                  |	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваровУслугУслуги.СчетУчетаНДС) КАК СчетУчетаНДС,
		                  |	ПоступлениеТоваровУслугУслуги.Содержание КАК Содержание,
		                  |	ПоступлениеТоваровУслугУслуги.ПодразделениеОрганизации КАК ПодразделениеЗатрат,
		                  |	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
		                  |	ПРЕДСТАВЛЕНИЕ(ПоступлениеТоваровУслугУслуги.СчетЗатрат) КАК СчетЗатрат
		                  |ИЗ
		                  |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		                  |ГДЕ
		                  |	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
		                  |	И ПоступлениеТоваровУслугУслуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";					  
	
	#КонецОбласти
	ТекстЗапроса = ТоварыДокумента
		+ ДанныеТаблицыУслуги;
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
		Запрос.УстановитьПараметр("ВалютаДок", ДанныеИБ.ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаРег", Константы.ВалютаРегламентированногоУчета.Получить());
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
	
	
	Результат.Вставить("Товары", ТаблицаТовары);
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	Возврат Результат;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаРеализации_отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаРеализации_отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ПодразделенияОрганизаций_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ПодразделенияОрганизаций_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ГТДИмпорт_ПТиУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ГТДИмпорт_ПТиУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
<<<<<<< HEAD
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
=======
>>>>>>> db63894bc345d19bee9a745765fc9f4825433a73
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПлатежноеПоручениеВходящее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППВ_ПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППВ_ПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_ПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_ПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_ПеречислениеЗаработнойПлаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_ПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_ПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_ПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_ПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_ПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_ПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_ПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_ПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_РасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_РасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ППИ_РасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ППИ_РасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПТИУ_Перевыставление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПТИУ_Перевыставление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТребованиеНакладная_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КлассификаторЕдиницИзмерения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПодразделенияОрганизаций_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПодразделенияОрганизаций_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатежноеПоручениеВходящее_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПлатежноеПоручениеИсходящее_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
